1 为什么要学习数据库
    市面的软件99%都会用到数据库
2 数据库是什么？
3 课程安排
    4天
        oracle 2.5天
            1.5 天 查询
            0.5 天 增删改
            0.5 天 创表删表等操作

        mysql  1.5天
            0.5 天 学习跟oracle不一样的点
            1   天 做个小案例
4 数据库操作：

    数据库启动关闭    
        以oracle用户登录linux

        sqlplus / as sysdba
            以数据库管理员的方式登录oracle数据库 ，默认用户名是sys


        sql>  startup 
            启动数据库实例  （在sqlplus中执行）
            实例：oracle的一组服务

        sql>  shutdown   
            关闭数据库实例


        exit  退出sqlplus


    数据库监听服务启动和关闭

        lsnrctl start
            启动数据库的监听服务
            如果不启动监听服务，oracle远程没有办法连接上的

        lsnrctl stop
            关闭数据库监听服务

        lsnrctl status
            查看监听服务的状态


    修改scott用户密码
        必须要oracle的管理员权限去修改
        sqlplus / as sysdba 
        sql> alter user scott identified by "123456" ;

    登录scott用户

        sqlplus 用户名/密码
            本地登录
            sqlplus scott/11

        sqlplus 用户名/密码@//服务器ip/实例名(orcl)
            远端登录

        sqlplus scott/11@//192.168.177.233/orcl

    查看scott用户方案所拥有的表
        使用scott用户登陆之后
        select * from tab;

5 简单查询：

        select * from 表名
        select 列名1 as "别名1",列名2,表达式.... from 表名

    查询emp表的所有数据
        select * from emp
    设置行宽
        set linesize 140
    设置页高
        set pagesize 50

    查询员工号，姓名，月薪，奖金，年薪，年收入 并修改列名为中文
        select empno as "工 号",ename as 姓名,sal 月薪,comm 奖金 ,sal*13 年薪, sal*13 + nvl(comm,0)  年收入
        from emp

        1 sql查询可以按照列名来查询
        2 可以使用表达式作为列名，数据库会自动计算出每一列每一行表达式的值
        3 可以对列起别名

        nvl 函数，如果参数1表达式为null，返回参数2

        结论：
            null 数据类型 做任何的数值运算结果都为null

    查看员工表所有部门编号并去除重复
        select distinct deptno from emp

            distinct 就是去除重复的行

    计算表达式3+2
        select 3+2 from dual

        dual是一张虚表，我们可以从这张表里边去计算表达式

6 单条件查询：
    select ...
    from ...
    where cond

    查询10号部门的员工信息
        select * from emp where deptno = 10

    查询KING的信息
        select * from emp where ename = 'KING'
        注意：数据中的字符串是大小写敏感的

        数据中的字符串，使用单引号
        单引号用于数据的字符串
        双引号用于数据库对象名 ，表名 列名 ...

    查询薪水不等于1250的员工信息
        大于      小于      不等于       等于
        > >=     <  <=      !=  <>      =

        select * from emp where sal <> 1250

    查询入职日期为1981年11月17日的员工信息
        日期的比较可以直接使用字符串来比较，数据库会自动做一个隐式的转换

        select * from emp where hiredate = '1981-11-17'
        ORA-01861: 文字与格式字符串不匹配
        当用字符串跟日期进行比较的时候，注意日期格式
        select * from v$nls_parameters;  
            查询当前会话的环境变量
        select * from emp where hiredate = '17-11月-81'
        alter session set NLS_DATE_FORMAT='yyyy-mm-dd'
            修改当前会话的时间日期格式字符串


7 多条件查询：
        与       或       非
    C   &&       ||       !
    sql and      or       not

    查询10号部门中月薪为1300的员工
        select * from emp where deptno=10 and sal =1300

    查询部门号是10或者20的员工信息
        select * 
        from emp 
        where deptno = 10 or deptno = 20

        sqlplus 中 使用 ed 命令，打开一个编辑器，用来编辑上一条执行过的sql语句
        修改这条语句（最后不要使用分号），换行之后添加一个单独的 / 表示结束  ，保存退出，然后敲入/回车执行上一条指令

        select * 
        from emp
        where deptno in (10,20)

    查询部门不是10和20的员工信息
        select * 
        from emp
        where deptno not in (10,20)

    查询工资介于1000到2000之间的员工
        select *
        from emp
        where sal >=1000 and sal <=2000

        select *
        from emp
        where sal between 1000 and 2000
            between and 是一个闭区间
    
    查询1981年2月（含2月）到82年2月（不含2月）入职的员工信息
        1981-2-1   1982-1-31

        select * 
        from emp
        where hiredate between '1981-02-01' and '1982-01-31'

    查询没有奖金的员工信息
        select * 
        from emp
        where comm = null

        结论：
            null做任何逻辑运算，结果都为假

        select *
        from emp
        where comm is null
    
    查询有奖金的员工信息
        select *
        from emp
        where comm is not null

8 模糊查询：
    每次掉线之后重新连接之后都要设置行宽页高的问题
        配置 C:\app\itcast\product\11.2.0\client_1\sqlplus\admin\glogin.sql
        每次登录sqlplus之后都会马上执行的一些指令

    select ...
    from ..
    where 列名 like '模式字符串'
        %   表示任意字符任意次数
        _   表示单个任意字符

        sql 的模式匹配没有默认转义字符，可以指定转义字符

        like '模式子串' escape '转义字符'
    查询员工首字母是S的员工信息
        select *
        from emp
        where ename like 'S%'
    
    查询名字是四个字母的员工信息
        select *
        from emp
        where ename like '____'
    
    查询姓名带下划线的员工信息
        insert into emp values(8000,'A_B','CLERK',7902,sysdate,900,null,20);
        select * 
        from emp
        where ename like '%\_%' escape '\'
    
9 排序：
    select ...
    from ....
    where ...
    order by 列名1,列名2... desc|asc

        asc 升序  (默认)
        desc 降序

    员工信息按先后入职日期排序
        select * from emp order by hiredate

    员工信息按薪水从大到小排序
        select *
        from emp
        order by sal desc

    员工信息按部门号和薪水排列
        select *
        from emp
        order by deptno , sal

        排序的规则，先排第一列，第一列相同的情况下再按照第二列来排序
        以此类推

    员工信息按部门和薪水排列，降序
        select *
        from emp
        order by deptno desc, sal desc

        desc和asc 只对单列生效

    员工信息按奖金倒序
        select *
        from emp
        order by comm desc nulls last|first

        结论：
            null值会影响排序

    员工信息按第2列排序
        select ename , empno
        from emp
        order by 2

        按照第几列来排序是指结果集的第几列，不是表的第几列

    员工信息按别名排序
        select ename , empno "工号"
        from emp
        order by "工号"

单行函数：
10 字符函数：
    lower   将字符串转为小写
    upper   将字符串转为大写
    initcap 将首字母变成大写
        select lower('hELLO'),upper('heLlo'),initcap('hEllO') from dual
        LOWER UPPER INITC
        ----- ----- -----
        hello HELLO Hello
    concat
        select concat('hello ','world') from dual
        concat 默认只接收两个参数
        select concat('hello ',concat('world','aaa')) from dual;
        oracle还提供另一种方法，使用 ||
        select 'hello'||'world'||123||456 from dual
    substr
        select substr('helloworld',3),substr('helloworld',3,5) from dual

        substr(字符串,起始位置)    从起始位置开始一直取到字符串的结尾
        substr(字符串,起始位置,n) 从起始位置开始取n个字符

    instr  用来查找A字符串在B字符串中的位置
        select instr('helloworld','llo') from dual
    lpad,rpad   左右填充
        select lpad('hello',10,'#') from dual
        将字符串进行填充到10的长度，如果不够就填充#号
    trim
        裁剪字符串两边空白的字符
        select trim('   Hello   ') from dual;
        指定裁剪字符串两边特定的字符
        select trim('H' from 'HHHHhelloHHHHH') from dual;
            裁剪字符串两边大写的H
    replace
        select replace('hello','l','*') from dual;
    
11 数值函数：
    round   四舍五入
    trunc   截取数值
    ceil、floor  向上取整、向下取整
    mod     取模 ， %
        select round(45.926,2),trunc(45.926,2),ceil(45.926),floor(45.926),
            mod(1000,600)
            from dual

12 转换函数：
    数字转字符串 to_char
        将薪水转化为本地货币字符型
        select empno,ename,sal,to_char(sal,'L9999.99') from emp
        to_char(数值表达式,'格式字符串')

            格式字符串：
                L 本地货币符号
                9 表示一位数值

    字符串转数字 to_number
        select to_number('￥800.00','L9999.99') from dual;

    日期转字符串 to_char
        select empno,ename,to_char(hiredate,'dd,mm,yyyy') from emp;
    字符串转日期 to_date
        select to_date('17,12,1980','dd,mm,yyyy') from dual
    
        结论：to_char用什么格式字符串，to_number或者to_date就可以使用该格式字符串转化回来
13 日期函数：
    sysdate
        显示昨天、今天、明天
            select sysdate - 1 昨天,sysdate 今天 , sysdate +1 明天 from dual
            时间日期数据类型计算单位是1天
        计算员工工龄，按照日、周、月、年显示
            select sysdate-hiredate 日,
                   (sysdate-hiredate)/7 周,
                   (sysdate-hiredate)/30 月,
                   (sysdate-hiredate)/365 年 
                from emp

    months_between 
        计算两个时间日期的数值相差多少个月

            select sysdate-hiredate 日,
                   (sysdate-hiredate)/7 周,
                   (sysdate-hiredate)/30 月,
                   months_between(sysdate,hiredate) 月2,
                   (sysdate-hiredate)/365 年 
                from emp
    add_months
        计算明年今日
            select add_months(sysdate,12) from dual
    last_day
        计算月份的最后一天
            select last_day(sysdate) from dual
    next_day
        计算下一个星期几
            select next_day(sysdate,'星期五') from dual
14 通用函数：
    nvl(exp,val)
        如果exp 为null ，就返回val
    nvl2(exp,val1,val2)
        如果exp为null，就返回val2，否则返回val1

        查询员工信息，有奖金就显示'有奖金'，没奖金就显示'没奖金'
        select ename,nvl2(comm,'有奖金','没奖金') from emp
    
15 条件语句：
    case when then else end
    decode
    总裁决定给大家涨工资，主管涨1000，销售涨500，其他涨200
        switch(job)
        {
            case 'MANAGER':  sal+1000; break;
            case 'SALESMAN' : sal + 500 ;break;
            default : sal+200 ; break;
        }

        case 是sql标准
        select ename,job,sal "涨前工资",
            case job
                when 'MANAGER' then sal + 1000
                when 'SALESMAN' then sal + 500
                else sal+200
            end "涨后工资"
        from emp

        decode 不是sql标准，oracle自身拓展出来
            decode(expr,val1,val2,val3,val4 ....,default)
                判断表达式expr 的值，如果为val1,就返回val2
                如果为val3,就返回val4 依次类推，如果都不是，就返回最后一个default
            select ename,job,sal "涨前工资",
                decode(job,'MANAGER',sal+1000,'SALESMAN',sal+500,sal+200) "涨后工资"
            from emp
多行计算函数：
16 统计函数：
    多行函数相对于单行的函数来说，必须遍历整个表或者部分数据才可以计算出结果
    sum
        求员工工资总和
        select sum(sal) from emp
    count
        只要某一行某一列有值，count就会+1

        求员工数量,有奖金的员工数
            select count(empno),count(*),count(comm) from emp
            select sum(1) from emp;
        结论：
            null不会参与统计函数的计算

        求工作岗位数量
            select count(distinct job) from emp

    max/min
        求员工最高工资和最低工资
    avg
        求员工平均工资
            select avg(sal) from emp
        求员工平均奖金（三种方式）
            select sum(comm)/count(*),
                    sum(comm)/count(comm),
                    avg(comm)
                from emp
        
17 分组统计：
    select ..
    from ...
    where cond1
    group by 列1,列2...       #根据某一列或者多列来分组
    having cond2


    查询各部门平均工资
        select *
        from emp
        group by deptno

        注意：如果使用了group by来进行分组，select后面的列有限制
            能填的只能是group by 中出现过的列， 或者 是 统计函数
        select deptno,avg(sal)
        from emp
        group by deptno

        结论：
            多行函数（统计函数）在没有分组的前提下，统计的是全表（有where就是通过where
            筛选）的数据，在有分组的前提下，统计的就是分组

    
    查询平均薪水大于2000的部门
        select deptno,avg(sal)
        from emp
        where avg(sal)>2000
        group by deptno
        第 3 行出现错误:
        ORA-00934: 此处不允许使用分组函数

        结论：统计函数在where条件中不允许使用

        换成having

        select deptno,avg(sal)
        from emp
        group by deptno
        having avg(sal) > 2000
    
    求10号部门员工的平均薪水
        select deptno , avg(sal)
        from emp
        where deptno = 10
        group by deptno

        换成having

        select deptno , avg(sal)
        from emp
        group by deptno
        having deptno = 10

    having与where的区别
        结论：
            能够用where 就不要用having

        sql查询先后顺序：

        select ...
        from ...
        where cond1
        group by ....
        having cond2
        order by ...

        1 遍历表，查询数据，每一行数据都要进行严格筛选，筛选条件就是where cond1,得到结果集1
        2 对结果集1求分组 ，计算统计函数的表达式的值，得到结果集2
        3 对结果集2 进行筛选，筛选条件就是 having cond2  ，得到结果集3
        4 排序，之后筛选出我们想要的列，返回最终结果集

            where筛选是先于having，现在where进行筛选，能够减少后边计算的数据,从而提高查询语句性能








