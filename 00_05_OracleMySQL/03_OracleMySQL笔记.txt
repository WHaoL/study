
作业
【第一题】：找到员工表中工资最高的前三名， 要求按如下格式输出

    补充知识 rownum 行号   
        select rownum , emp.* from emp 
        看到行号，行号是筛选数据的过程中自动生成的，并不真正存在于表中


    select rownum , ename, sal 
    from emp
    order by sal desc

    行号是乱的，工资的降序是对的
    结论：行号在排序前已经生成好了

    思路：
        先排序，再生成行号 
        再筛选 行号 < 3

        子查询先排序，父查询生成行号

    select rownum, e.*
    from 
    (
        select empno,ename,sal
        from emp
        order by sal desc
    ) e
    where rownum <=3

    延伸的问题： 分页问题，按照工资降序排序，取5-8 名 

        也是依赖行号

        rownum不能直接用 > 来比较  ，除了 >=1 

        行号的生成逻辑有关
        行号生成在where条件判断的时候

        where rownum <=3
            1      king          where 1<=3 为真   通过筛选
            2      ford          where 2<=3 为真   通过筛选
            ...

        where rownum >=5
            1      king          where 1>=5 为假   没通过筛选
            1      ford          where 1>=5 为假   没通过筛选
            ...
                因为king没有通过筛选，1号的行号保留

        先让行号固定下来，不要筛选的时候再生成

        select *
        from 
        (
            select rownum r, e.*
            from 
            (
                select empno,ename,sal
                from emp
                order by sal desc
            ) e
        )
        where r >=5 and r <=8

【第二题提示】：找到emp表中薪水大于本部门平均薪水的员工
    empno ename sal avgsal

        多表查询   ,自行构造另一张表 
        from 后置子查询

    1 查询每个部门的平均工资
        select deptno,avg(sal)
        from emp
        group by deptno 

    2 用以上的结果和emp表，进行多表连接
        select *
        from emp a,
        (
            select deptno,avg(sal) avg_sal
            from emp
            group by deptno 
        ) b
        where a.deptno = b.deptno and a.sal > b.avg_sal


    关联子查询

        子查询不能独立的执行，必须依赖父查询

        select *
        from emp outer
        where sal > (
            --查询出该员工所在部门的平均工资
            select avg(sal)
            from emp inner
            where inner.deptno = outer.deptno
        )

        一般先执行子查询（内查询），再执行父查询（外查询）；关联子查询除外

        关联子查询原理，每次父查询迭代，都会执行一次子查询
        例子：
            allen   部门号 30
            执行子查询 ,查询出30号部门的平均工资
                select avg(sal) from emp where deptno = 30
            最后再通过父查询的where条件来判断


            jones   部门号是20
            执行子查询，查询出20号部门的平均工资
            ...

            结论：
                关联子查询中，where条件迭代多少次，子查询就执行多少次

                慎用关联子查询




【第三题提示】：        统计每年入职的员工个数
    

    select hire_year,count(*)
    from 
    (
        select to_char(hiredate,'yyyy') hire_year
        from emp
    )
    group by hire_year

    1980 1
    1981 2 
    .....

    可以使用01 标记法  ，依赖 条件语句

                1980   1981   1982  ....
        1980      1      0      0
        1981      0      1
        1981      0      1
        1981
        1981
        1981
        1981
        1987
        1981
        1981
        1987
        1981
        1981
        1982



    select  
            count(*) total,
            sum("year_1980") "1980",
            sum("year_1981") "1981",
            sum("year_1982") "1982",
            sum("year_1987") "1987"
    from 
    (
        select hire_year,
            decode(hire_year,'1980',1,0) "year_1980",
            decode(hire_year,'1981',1,0) "year_1981",
            decode(hire_year,'1982',1,0) "year_1982",
            decode(hire_year,'1987',1,0) "year_1987"
        from 
        (
            select to_char(hiredate,'yyyy') hire_year
            from emp
        )
    )





1 oracle表
    1 创建表

        create table 表名
        (
            列名1 类型1,
            列名2 类型2,
            .....
        )


        创建一个员工表t1，员工号id（整数），和姓名name（字符串）
            create table t1
            (
                id number,
                name varchar2(30)
            )


            sql 标准
                varchar  可变长的字符串
            oracle 自身拓展了一下  varchar2
                char    定长的字符串


                char(30)
                    跟C中char[30]差不多，定长，不管存储什么数据，就固定占用30个字符空间
                varchar(30)
                    最多也只能存储30个字符的空间，但是如果只存储hello，只会占用约5个字符空间

                char查询性能是要高于varchar，明确数据的长度就是固定的，可以直接用char
                例子：身份证号18位


        
    2 修改表
        alter table 表名 xxxxx

        1 往t1表里边添加一列 email varchar(40)
            alter table t1 add email varchar(40)
            
        2 修改t1表email列名为address
            alter table t1 rename column email to address
            
        3 修改t1表address列类型为varchar(50)
            alter table t1 modify address varchar(50)
            
        4 删除t1表address列
            alter table t1 drop column address
            
        5 修改t1表名为t2
            rename t1 to t2
        
    3 另一种创建表的方式
    
        创建一张表emp2，数据跟emp表一样
            create table emp2 as select * from emp

        
        创建一张表emp3，数据跟emp表一样，只有表结构，没有数据

            create table emp3 as select * from emp
            delete from emp3


            create table emp4 as select * from emp where 1=2

        
    4 清空表
        delete from 表名 

        truncate table t1 

        1.  delete 逐条删除表“内容”，truncate 先摧毁表再重建。 
        (由于delete使用频繁，Oracle对delete优化后delete快于truncate)
        2.  delete 是DML语句，truncate 是DDL语句。DML语句可以闪回(flashback)和回滚rollback，DDL语句不可以闪回和回滚。
        （闪回： 做错了一个操作并且commit了，对应的撤销行为。了解）
        3.  由于delete是逐条操作数据，所以delete会产生碎片，truncate不会产生碎片。
        （同样是由于Oracle对delete进行了优化，让delete不产生碎片）。两个数据之间的数据被删除，删除的数据——碎片，整理碎片，数据连续，行移动。
        4.  delete不会释放空间，truncate 会释放空间。用delete删除一张10M的表，空间不会释放。而truncate会。所以当确定表不再使用，应使用truncate。

            
    5 删除表
        drop table 表名

            oracle提供了回收站机制，删表的时候先移动到回收站

        purge table 表名
            从回收站中彻底删除某张表

        drop table 表名 purge
            彻底删除表，不移动到回收站

        oracle 提供一个闪回的技术，能够将表还原到以前的某个时间点
            flashback table 表名 to before drop

        show recyclebin
        purge recyclebin 
            清空回收站
    
    6 表的约束

        1 非空
            not null
        2 唯一
            unique

        3 检查
            check
        4 主键
            primary key

            隐含了 not null + unique


        5 外键
            foreign key
            一张表的某一列（或多列）参照另一张表的某一列（或多列）
            在这张表填入的数据必须要在另一张表中能够找到，或者为null
            涉及的问题
                父表的数据删除(更新）了子表数据怎么办
                    1 不允许父表执行删除
                    2 父表删除数据之后，子表对应的数据全部设置为null
                    3 父表删除数据之后，子表对应的数据也跟着删除，级联删除

        create table 表名
        (
            列名1 类型1 [constraint 约束名1] 约束类型2  constraint 约束名2 约束类型2,
            列名2 类型2 [constraint 约束名3] 约束类型3  ,
            ....
        )

        create table student 
        (
            sid number constraint pk_student primary key, --学生Id主键约束
            sname varchar2(20) constraint nn_student_name not null,--学生姓名非空约束
            email varchar2(20) constraint un_student_email unique --学生邮件唯一约束
                constraint nn_student_email not null,   --同时邮件可再设非空，没有“，”
            age number constraint chk_student_age_min check(age > 10),  --学生年龄设置check约束
            gender varchar2(6) constraint chk_student_gender check(gender in ('男', '女')),
            deptno number constraint fk_student references dept (deptno) ON DELETE SET NULL
        )   


2 视图
    
    create view 视图名称
    as
        子查询


    要注意，创建视图需要权限，需要oracle管理员对scott赋予权限
        在centos 上 使用 sqlplus / as sysdba

        grant create view to scott 

    创一个视图，用来观看10号部门的员工信息
        create view v_emp_10
        as 
            select * from emp where deptno = 10

        create table t_emp_10
            as select * from emp where deptno = 10

        视图是不存在数据，只是一个查询语句的结果
        每次执行 select 去查看视图的时候，都会执行视图的sql语句
        视图其实也是一条查询sql语句的封装


    删除视图
        drop view 视图名

        
        
3 序列
    创建一张表
    create table t1
    (
        id number primary key,
        name varchar2(30) not null
    )

    insert into t1 values(1,'name-1')
    insert into t1 values(2,'name-2')
    人工去记住这个id，不靠谱，让计算机自身去记住这个id，每次自增

    create sequence 序列名

        currval
            当前的序列的值
            select myseq.currval from dual
            第 1 行出现错误:
            ORA-08002: 序列 MYSEQ.CURRVAL 尚未在此会话中定义
            获取currval 不能早于第一次获取nextval
        nextval
            select myseq.nextval from dual
            从序列获取下一个值

            每次sql执行，nextval只会获取一次值

    drop sequence 序列名

4 索引
    原理，对数据某一列（或者多列）进行排序，将排序好的数据以及对应的行地址
    存起来，下次查询数据的时候先查询索引，然后再提取数据


    create index 索引名 on 表名(列名)
    create index 索引名 on 表名(列名1,列名2 ....)

    create index inx_emp_deptno on emp(deptno)

    索引创建完成之后，不用我们去管，正常做查询，数据库自动判断我们查询条件
    有没有用到索引，有用到就自动使用

    什么情况下用到索引
        create index inx_emp_deptno on emp(deptno)
        where deptno = 10


        create index idx2 on emp(deptno,job)   复合索引
            where job = 'CLERK'   有没有用到索引？  -- 没有用到索引
            where deptno>10 and job = 'xxxx'    使用到了索引


    删除索引 drop index 索引名字
    
5 同义词
    
    为hr.employees表创建同义词
        create synonym 别名 for 某数据库对象
        create synonym hremp for hr.employees;
    
    删除同义词
        drop synonym 别名




6 mysql


    直接在shell环境中 使用以下命令
    mysql -u用户名 -p

    mysql -uroot -p123456

        其中root是用户名，该用户跟linux中的root不是同一个用户
        mysql有自己的账号体系，其中的数据库管理员也叫root



    oracle 账号体系,一个用户对应一个方案，用户名就是方案名
    在mysql中一个用户是可以拥有多个方案

    show databases|schemas  
        查看当前用户拥有哪些数据库（方案）

    use 数据库名
        切换到某个数据库进行操作

    show tables 
        查看当前该数据库中有什么表


    结论：
        mysql账号体系比oracle要多一层，要操作方案（数据库）


库操作
    创建数据库d1 并指定默认字符集为UTF8


    create database d1 default charset= 'UTF8';



    查看创库语句
        show create database d1;


    删库
        drop database 库名



创建表
    t1
    ( id 整形 
      name 可变字符串30长度
    )

    create table t1
    (
        id int,
        name varchar(30)
    )

    edit 命令可以打开编辑器，默认是使用vi

    desc 表名
        查看表结构


修改表
    添加一列email varchar(30)
        alter table t1 add email varchar(30)
  
    修改name 增加长度到40字符
        alter table t1 modify name varchar(40)
  
    修改email 列重命名 到 address ，并且修改类型为 varchar(40)
        alter table t1 change email address varchar(40)
  
    显示创建该表的sql语句
        show create table t1;

    删除列address
        alter table t1 drop column address

    修改表t1表名为T2，注意大小写
        rename table t1 to T2

    删除表T2
        drop table t2


    结论：mysql 表名等数据库对象名大小写敏感





